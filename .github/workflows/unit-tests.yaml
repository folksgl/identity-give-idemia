---
# This workflow will install Python dependencies and run tests so that
# unit tests can be run against pull requests.

name: Unit-Tests

on:
  pull_request:
    paths-ignore:
      - '**.md'  # All markdown files in the repository

jobs:
  unit-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3.0.1
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Test with Django unit tests
        env:
          # For unit tests, secret_key just needs to be populated.
          # It will only ever access a temporary Django test database.
          SECRET_KEY: unit-test-fake-secret-key-#5TY90
          POSTGRES_HOST: postgres
          POSTGRES_PORT: 5432
        run: python manage.py test --debug-mode
